CHATRA_IGNORE_THIS_LINE R"***(
/*
 * Programming language 'Chatra' reference implementation
 *
 * Copyright(C) 2019-2020 Chatra Project Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * author: Satoshi Hosokawa (chatra.hosokawa@gmail.com)
 */

import containers

class Stream
	def close()


class InputStream extends Stream
	def init()
		super()

	def available()
		return 0

	def read(buffer: ByteArray, offset: 0, length: -1)
		throw UnsupportedOperationException()

	def skip(length: Int)
		return read(ByteArray().resize(length))


class OutputStream extends Stream
	def init()
		super()

	def flush()

	def write(buffer: ByteArray, offset: 0, length: -1)
		throw UnsupportedOperationException()


class RandomAccessStream extends Stream
	def init()
		super()

	def seek(offset: Int; begin: false, end: false, current: false)  // default is current
		throw UnsupportedOperationException()

	def position()
		throw UnsupportedOperationException()


class FileInputStream extends InputStream, RandomAccessStream
	def _init_instance(fileName, kwargs) as native

	def init(fileName: String; kwargs...)
		super()
		_init_instance(fileName, kwargs)

	def close() as native

	def available() as native

	def _native_read(buffer, offset, length) as native

	def read(buffer: ByteArray, offset: 0, length: -1)
		return _native_read(buffer, offset, length)

	def skip(length: Int)
		return _native_read(null, -1, length)

	def _native_seek(offset, origin) as native

	def seek(offset: Int; begin: false, end: false, current: false)
		_native_seek(offset, begin ? 0 : end ? 1 : 2)
		return self

	def position() as native


class FileOutputStream extends OuputStream, RandomAccessStream
	def _init_instance(fileName, append, kwargs) as native

	def init(fileName: String; append: false, kwargs...)
		super()
		kwargs['append'] = append
		_init_instance(fileName, append, kwargs)

	def close() as native

	def flush() as native

	def _native_write(buffer, offset, length) as native

	def write(buffer: ByteArray, offset: 0, length: -1)
		return _native_write(buffer, offset, length)

	def _native_seek(offset, origin) as native

	def seek(offset: Int; begin: false, end: false, current: false)
		_native_seek(offset, begin ? 0 : end ? 1 : 2)
		return self

	def position() as native


def Reader extends Stream
	sync
		var _stream
		var _buffer
		var _available
		var _offset: 0

	def init(stream: InputStream; bufferSize: 1024)
		_stream = stream
		_buffer = ByteArray().resize(bufferSize)
		_available = _stream.read(_buffer)

	def close()
		_stream.close()

	def _convertToString(buffer) as native

	def readLine()
		out: ByteArray()
		readLoop: while True
			while _offset < _available
				c: _buffer[_offset++]
				if c == 0x0A
					break readLoop
				out.add(c)

			_available = _stream.read(_buffer)
			if _available == 0
				break
			_offset = 0
		return out.size() == 0 ? null : _convertToString(out)

	def readLines()
		lines: {}
		while (line: readLine()) != null
			lines.add(line)
		return lines


def Writer extends Stream
	sync
		var _stream
		var _buffer: ByteArray()

	def init(stream: OutputStream)
		_stream = stream

	def close()
		_stream.close()

	def flush()
		_stream.flush()

	def _convertToUtf8(buffer, line) as native

	def write(line: String; lineFeed: false)
		if lineFeed
			line += '\n'
		length: _convertToUtf8(_buffer, line)
		_stream.write(_buffer, 0, length)

	def writeLine(line: String)
		write(line, lineFeed: (line.size() == 0 or line[-1] != 0x0A))

	def writeLines(lines)
		for line in lines
			writeLine(line)


def open(fileName: String; read: false, write: false, stream: false, kwargs...)  // default is read
	if read and write
		throw UnsupportedOperationException()

	if write
		s: FileOutputStream(fileName, *kwargs)
		return stream ? s : Writer(s)
	else
		s: FileInputStream(fileName, *kwargs)
		return stream ? s : Reader(s)


CHATRA_IGNORE_THIS_LINE )***"
