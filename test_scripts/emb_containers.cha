/*
 * Programming language 'Chatra' reference implementation
 *
 * Copyright(C) 2020 Chatra Project Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * author: Satoshi Hosokawa (chatra.hosokawa@gmail.com)
 */

import containers

def testByteArray()
	log('[testByteArray]')

	v = ByteArray()
	v.add(32)
	_check('constructor call and add()', v.size() == 1 and v[0] == 32)
	v.add(33)
	_check('add an element', v.size() == 2 and v[0] == 32 and v[1] == 33)
	v.add(34)
	_check('element access', v[0] == 32 and v[1] == 33 and v[2] == 34 and
			v[-1] == 34 and v[-2] == 33 and v[-3] == 32)

	do
		v.add(256)
		_check('adding invalid value', false)
		catch IllegalArgumentException
			_check('adding invalid value', true)
	do
		v.add(-1)
		_check('adding invalid value', false)
		catch IllegalArgumentException
			_check('adding invalid value', true)
	do
		v.add(true)
		_check('adding invalid value', false)
		catch IllegalArgumentException
			_check('adding invalid value', true)
	do
		v.add(1.0)
		_check('adding invalid value', false)
		catch IllegalArgumentException
			_check('adding invalid value', true)
	do
		v.add('abc')
		_check('adding invalid value', false)
		catch IllegalArgumentException
			_check('adding invalid value', true)

	do
		v[3]
		_check('element access (outside boundary)', false)
		catch IllegalArgumentException
			_check('element access (outside boundary)', true)
	do
		v[-4]
		_check('element access (outside boundary)', false)
		catch IllegalArgumentException
			_check('element access (outside boundary)', true)

	_check('has', v.has(32) and v.has(33) and v.has(34) and !v.has(0))

	v = ByteArray().add(12, 23, 34)
	_check('add array', v.size() == 3 and v[0] == 12 and v[1] == 23 and v[2] == 34)

    do
    	v = ByteArray().add(1, 256, 3)
		_check('adding invalid value', false)
    	catch IllegalArgumentException
    		_check('adding invalid value', true)

    do
    	v = ByteArray().add(1, -1, 3)
		_check('adding invalid value', false)
    	catch IllegalArgumentException
    		_check('adding invalid value', true)

	v = ByteArray{123, 234, 34}
	a = v.remove(1)
	_check('remove an element', v.size() == 2 and v[0] == 123 and v[1] == 34 and a == 234)
	a = v.remove(-1)
	_check('remove an element', v.size() == 1 and v[0] == 123 and a == 34)
	a = v.remove(0)
	_check('remove an element', v.size() == 0 and a == 123)
	do
		v.remove(0)
		_check('remove (invalid index)', false)
		catch IllegalArgumentException
			_check('remove (invalid index)', true)
			
	v = ByteArray()
	v.insert(0, 12)
	_check('constructor call and insert()', v.size() == 1 and v[0] == 12)
	v.insert(0, 23)
	_check('insert an element', v.size() == 2 and v[0] == 23 and v[1] == 12)
	v.insert(1, 34)
	_check('insert an element', v.size() == 3 and v[0] == 23 and v[1] == 34 and v[2] == 12)
	v.insert(3, 45)
	_check('insert an element', v.size() == 4 and v[0] == 23 and v[1] == 34 and v[2] == 12 and v[3] == 45)
	v.insert(-2, 45)
	_check('insert an element', v.size() == 5 and v[0] == 23 and v[1] == 34 and v[2] == 45 and v[3] == 12 and v[4] == 45)
	do
		v.insert(6, 67)
		_check('insert (invalid index)', false)
		catch IllegalArgumentException
			_check('insert (invalid index)', true)

	v = ByteArray{12, 23}
	v.insert(0, 45, 56)
	_check('insert array', v.size() == 4 and v[0] == 45 and v[1] == 56 and v[2] == 12 and v[3] == 23)

	v = ByteArray{1, 2, 3, 4}
	v.append(a{5, 6, 7, 8})
	_check('append', v.size() == 8 and v[0] == 1 and v[3] == 4 and v[4] == 5 and v[7] == 8)

	v = ByteArray{1, 2, 3, 4}
	v.append(ByteArray{5, 6, 7, 8})
	_check('append', v.size() == 8 and v[0] == 1 and v[3] == 4 and v[4] == 5 and v[7] == 8)

	v1 = ByteArray{0, 1, 2, 3, 4, 5}
	v2 = v1.remove(Range(1, 4))
	_check('remove range', v1.size() == 3 and v1[0] == 0 and v1[1] == 4 and v1[2] == 5 and
			v2.size() == 3 and v2[0] == 1 and v2[1] == 2 and v2[2] == 3)

	v1 = ByteArray{0, 1, 2, 3, 4, 5}
	v2 = v1.remove(Range(1, 6, step: 2))
	_check('remove range', v1.size() == 3 and v1[0] == 0 and v1[1] == 2 and v1[2] == 4 and
			v2.size() == 3 and v2[0] == 1 and v2[1] == 3 and v2[2] == 5)

	v1 = ByteArray{0, 1, 2, 3, 4, 5}
	v2 = v1.remove(Range(4, 0, step: -3))
	_check('remove range', v1.size() == 4 and v1[0] == 0 and v1[1] == 2 and v1[2] == 3 and v1[3] == 5 and
			v2.size() == 2 and v2[0] == 4 and v2[1] == 1)

	v1 = ByteArray{0, 1, 2, 3, 4, 5}
	v2 = v1.remove(Range(-2, -6, step: -2))
	_check('remove range', v1.size() == 4 and v1[0] == 0 and v1[1] == 1 and v1[2] == 3 and v1[3] == 5 and
			v2.size() == 2 and v2[0] == 4 and v2[1] == 2)

	v1 = ByteArray{1, 2, 3, 4}
	v2 = v1.clone()
	_check('clone', v2.size() == 4 and v2[0] == 1 and v2[1] == 2 and v2[2] == 3 and v2[3] == 4)

	v1.clear()
	_check('clear', v1.size() == 0)
	_check('cloned object is not affected from any modification to original object',
			v2.size() == 4 and v2[0] == 1 and v2[1] == 2 and v2[2] == 3 and v2[3] == 4)

	v1 = ByteArray{1, 2, 3, 5, 8, 13}
	v2 = ByteArray{1, 2, 3, 5, 8, 13}
	_check('equals', v1.equals(v2))

	v = ByteArray{1, 2, 3, 5}
	_check('toString', v.toString() == 'ByteArray{1, 2, 3, 5}')

	v = ByteArray{}
	_check('toString', v.toString() == 'ByteArray{}')

	v1 = ByteArray{1, 2, 3, 4, 5, 6, 7, 8}
	v2 = v1.sub(Range(1, 5))
	_check('sub', v2.size() == 4 and v2[0] == 2 and v2[1] == 3 and v2[2] == 4 and v2[3] == 5)

	v2 = v1.sub(Range(1, 8, step: 2))
	_check('sub (step: 2)', v2.size() == 4 and v2[0] == 2 and v2[1] == 4 and v2[2] == 6 and v2[3] == 8)

	v3 = v2.toArray()
	_check('toArray from ArrayView', v3 is Array and
			v3.size() == 4 and v3[0] == 2 and v3[1] == 4 and v3[2] == 6 and v3[3] == 8)

	_check('ArrayView.toString', v2.toString() == 'ByteArray{1, 2, 3, 4, 5, 6, 7, 8}.sub(Range(1, 9, step: 2))')

	v = ByteArray{1, 2, 3, 4, 5, 6, 7, 8}
	a = 0
	for it: e in v
		if e % 3 != 0
			a = it.remove()
	_check('remove via iterator', v.size() == 2 and v[0] == 3 and v[1] == 6 and a == 8)


testByteArray()

_checkCmd('finished')
