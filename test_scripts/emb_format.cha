/*
 * Programming language 'Chatra' reference implementation
 *
 * Copyright(C) 2020 Chatra Project Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * author: Satoshi Hosokawa (chatra.hosokawa@gmail.com)
 */

import format

class TestClass
	def toString()
		return 'hoge'

class DummyClass

def testFormat()
	log('[testFormat]')

	_check('null to "s"', format('abc%ss', null) == 'abcnulls')
	_check('bool to "s"', format('abc%sd', true) == 'abctrued')
	_check('bool to "s"', format('abc%sx', false) == 'abcfalsex')
	_check('int to "s"', format('abc%se', 123) == 'abc123e')
	_check('float to "s"', format('abc%sd', 2.34) == 'abc2.34d')
	_check('string to "s"', format('abc%sf', 'def') == 'abcdeff')
	_check('object to "s"', format('abc%sX', TestClass()) == 'abchogeX')
	do
		format('%s', DummyClass())
		_check('object w/o toString() method to "s"', false)
		catch MemberNotFoundException
			_check('object w/o toString() method to "s"', true)

	_check('null to "d"', format('%d', null) == '0')
	_check('bool to "d"', format('%d', true) == '1')
	_check('bool to "d"', format('%d', false) == '0')
	_check('int to "d"', format('%d', -123) == '-123')
	_check('float to "d"', format('%d', -2.34) == '-2')
	do
		format('%d', "abc")
		_check('string to "d"', false)
		catch IllegalArgumentException
			_check('string to "d"', true)
	do
		format('%d', TestClass())
		_check('object to "d"', false)
		catch IllegalArgumentException
			_check('object to "d"', true)

	_check('null to "x"', format('%x', null) == '0')
	_check('bool to "x"', format('%x', true) == '1')
	_check('bool to "x"', format('%x', false) == '0')
	_check('int to "x"', format('%x', -123) == '-7b')
	_check('int to "X"', format('%X', -123) == '-7B')
	_check('float to "x"', format('%x', -2.34) == '-2')
	do
		format('%x', "abc")
		_check('string to "x"', false)
		catch IllegalArgumentException
			_check('string to "x"', true)
	do
		format('%x', TestClass())
		_check('object to "x"', false)
		catch IllegalArgumentException
			_check('object to "x"', true)

	_check('null to "f"', format('%f', null) == '0.000000')
	_check('bool to "f"', format('%f', true) == '1.000000')
	_check('bool to "f"', format('%f', false) == '0.000000')
	_check('int to "f"', format('%f', -123) == '-123.000000')
	_check('float to "f"', format('%f', -2.34) == '-2.340000')
	_check('float to "f"', format('%f', -0.000000234) == '-0.000000')
	_check('float to "f"', format('%f', 1.0 / 0.0) == 'inf')
	_check('float to "F"', format('%F', 1.0 / 0.0) == 'INF')
	_check('float to "e"', format('%e', -2.34) == '-2.340000e+00')
	_check('float to "E"', format('%E', -2.34) == '-2.340000E+00')
	_check('float to "g"', format('%g', -0.0002345678) == '-0.000234568')
	_check('float to "g"', format('%g', -0.00002345678) == '-2.34568e-05')
	_check('float to "G"', format('%G', -0.00002345678) == '-2.34568E-05')
	_check('float to "a"', format('%a', -0.125) == '-0x1p-3')
	_check('float to "A"', format('%A', 0.25) == '0X1P-2')
	do
		format('%f', "abc")
		_check('string to "f"', false)
		catch IllegalArgumentException
			_check('string to "f"', true)
	do
		format('%f', TestClass())
		_check('object to "f"', false)
		catch IllegalArgumentException
			_check('object to "f"', true)

	_check('format specifier "<"', format('%<8d', -123) == '-123    ')
	_check('format specifier ">"', format('%>8d', -123) == '    -123')
	_check('format specifier "<0"', format('%<08d', -123) == '-123    ')
	_check('format specifier ">0"', format('%>08d', -123) == '-0000123')

	_check('format specifier "+"', format('%+8d', 123) == '    +123')
	_check('format specifier "+x"', format('%+8x', 123) == '      7b')

	_check('format specifier ".prec"', format('%8.4f', -1.23) == ' -1.2300')
	_check('format specifier "0.prec"', format('%08.4f', -1.23) == '-01.2300')

	_check('with bracket', format('abc%{}f', 'def') == 'abcdeff')
	_check('with bracket and key', format('abc%{value1:}f%{value0:d}g',
			value0: 123, value1: 'def') == 'abcdeff123g')
	_check('with bracket and key', format('0%s1%{value1:s}2%s3%{value0:s}4',
			'a', value0: 'b', value1: 'c') == '0a1c2b3b4')

	_check('options "m"', format('%{f;m=@}', 123.456) == '123@456000')
	_check('options "i"', format('%{f;i=#}', -123456.789) == '-123#456.789000')
	_check('options "f"', format('%{.7f;f=%c}', 123.4567891) == '123.456,789,1')


testFormat()

_checkCmd('finished')
